name: "Build and push to ECR"
on:
  push:
    branches:
    - master
  pull_request:
env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: clocktime
    ECR_IMAGE_NAME: latest
    ECR_WEB_REPOSITORY: clocktime
    IMAGE_WEB_TAG: latest
    ECR_REGISTRY: 730866387406.dkr.ecr.us-east-1.amazonaws.com
    ECS_SERVICE: ecs-app-stack-service
    ECS_CLUSTER: ecs-app-stack-cluster
    ECS_TASK_DEFINITION: task-definition.json
    CONTAINER_NAME: clocktime-app
    FLASK_APP: autoapp.py
    FLASK_DEBUG: 0
    FLASK_ENV: production
    GUNICORN_WORKERS: 4
    LOG_LEVEL: info
    SECRET_KEY: ${{ secrets.SECRET_KEY }}
    DSN_SENTRY: ${{ secrets.DSN_SENTRY }}
    SEND_FILE_MSEND_FILE_MAX_AGE_DEFAULT: 3155692
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
permissions:
    contents: read
jobs:
  deploy:
    name: Deploy Amazon ECS Task Definition
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
      
      - name: Amazon ECR "Login" Action for GitHub Actions
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, Tag, and Push Image to Amazon ECR 🏷
        id: build-image
        env:
           ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
           ECR_REPOSITORY: "clocktime"
           IMAGE_TAG: ${{ github.sha }}
        run: |
              # Build a docker container and
              # push it to ECR so that it can
              # be deployed to ECS.
              docker build --build-arg INSTALL_NODE_VERSION="20.1.0" --build-arg TARGET=production --build-arg FLASK_ENV="production"  --build-arg  INSTALL_PYTHON_VERSION="3.11.3" --file Dockerfile --tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker build --file ./nginix/Dockerfile --tag $ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_WEB_TAG
              echo "$ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_WEB_TAG" >> $GITHUB_OUTPUT
              echo "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              docker push $ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_WEB_TAG
              
              echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
              echo "image-nginx=$ECR_REGISTRY/$ECR_WEB_REPOSITORY:$IMAGE_WEB_TAG" >> $GITHUB_OUTPUT

      # - name: Fill in the new image ID in the Amazon ECS task definition
      - name: Render Amazon ECS task definition for APP container
        id: render-app-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
            task-definition: ${{ env.ECS_TASK_DEFINITION }}
            container-name: clocktime-app
            image: ${{ steps.build-image.outputs.image }}
       
      - name: Modify Amazon ECS task definition with Nginx container
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          container-name: clocktime-nginx
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
            task-definition: ${{ steps.render-web-container.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true