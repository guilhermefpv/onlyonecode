# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the $default-branch branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy to Amazon ECS

on:
  push:
    branches: [ master ]

env:
    AWS_REGION: us-east-1
    ECR_REPOSITORY: 730866387406.dkr.ecr.us-east-1.amazonaws.com/devops/chowchow
    ECS_SERVICE: devops
    ECS_CLUSTER: cluster
    ECS_TASK_DEFINITION: arn:aws:ecs:us-east-1:730866387406:task-definition/ecs-task-definition-web:1
    CONTAINER_NAME: chowchow
    FLASK_APP:  autoapp.py
    FLASK_DEBUG: 0
    FLASK_ENV:  production
    GUNICORN_WORKERS: 4
    LOG_LEVEL:  info
    SECRET_KEY: fLtqRxhPGJ9Z0mQDnffuRUBEL_FYf5ueLHSXbPRIuVY
    SEND_FILE_MSEND_FILE_MAX_AGE_DEFAULT: 3155692

permissions:
  contents: read

jobs:
  flask-prod:
   name: Docker Build Flask-Prod
   runs-on: ubuntu-latest
   environment: production  
   container:
    image: node:20.1.0
    env:
      NODE_ENV: production
    ports:
      - 8080:5000
    volumes:
    #   - my_docker_volume:/volume_mount
      - ./:/app
      - node-modules:/app/node_modules
    # options: --cpus 1
   steps:
   - name: Checkout
     uses: actions/checkout@v3
   
   - name: Setup Python
     uses: actions/setup-python@v4.6.0
     with:
        python-version: "3.11.3"

   - name: Setup Node.js environment
     uses: actions/setup-node@v2.5.2
     with:
        node-version: "20.1.0"
        registry-url: "https://registry.npmjs.org"

    
   - name: Install Python dependencies
     run: |
            python -m pip install --upgrade pip
            pip install -r requirements/dev.txt
            - name: Install Node dependencies
            run: npm install
            - run: cp .env.example .env
            - name: Run Node lints
            run: npm run lint
            - name: Run Python lints
            run: flask lint --check
            - name: Run Python tests
            run: flask test


  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2

      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image

      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}

        INSTALL_PYTHON_VERSION: "3.11.3"
        INSTALL_NODE_VERSION: "20.1.0"
        FLASK_ENV: production
        FLASK_DEBUG: 0
        LOG_LEVEL: info
        GUNICORN_WORKERS: 4
      
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
        #image: 730866387406.dkr.ecr.us-east-1.amazonaws.com/devops:chochow-prod

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        
