events {
  worker_connections 768;
}

http {
  # Nginx will handle gzip compression of responses from the app server
  gzip on;
  gzip_proxied any;
  gzip_types text/plain application/json;
  gzip_min_length 1000;

  log_format access_json escape=json
    '{'
      '"request_id":"$request_id",'
      '"time_iso8601":"$time_iso8601",'
      '"remote_addr":"$remote_addr",'
      '"remote_user":"$remote_user",'
      '"http_host":"$http_host",'
      '"request":"$request",'
      '"status":"$status",'
      '"body_bytes_sent":"$body_bytes_sent",'
      '"request_time":"$request_time",'
      '"request_length":"$request_length",'
      '"http_referrer":"$http_referer",'
      '"http_user_agent":"$http_user_agent",'
      '"request_completion":"$request_completion",'
      '"upstream_bytes_received":"$upstream_bytes_received",'
      '"upstream_connect_time":"$upstream_connect_time",'
      '"upstream_response_length":"$upstream_response_length",'
      '"upstream_response_time":"$upstream_response_time"'
    '}';
    
    access_log /var/log/nginx/access.log access_json;

  server {
    listen 80;

    # Nginx will reject anything not matching /api
    location / {
      # Reject requests with unsupported HTTP method
      if ($request_method !~ ^(GET|POST|HEAD|OPTIONS|PUT|DELETE)$) {
        return 405;
      }

      # Only requests matching the whitelist expectations will
      # get sent to the application server
      proxy_pass http://clocktime-app:5000/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header X-Request-Id $request_id;
      proxy_set_header Connection 'upgrade';
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_cache_bypass $http_upgrade;
    }
  }
}